{"version":3,"sources":["api/client.js","features/filters/filtersSlice.js","features/todos/times-solid.svg","features/todos/todosSlice.js","features/header/Header.js","features/filters/colors.js","features/todos/TodoListItem.js","features/todos/TodoList.js","features/footer/Footer.js","App.js","api/server.js","store.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","_path","StatusFilters","All","Active","Completed","initialState","status","colors","filtersSlice","createSlice","name","reducers","statusFilterChanged","state","action","payload","colorFilterChanged","reducer","color","changeType","includes","push","filter","existingColor","prepare","actions","todosAdapter","createEntityAdapter","getInitialState","fetchTodos","createAsyncThunk","todos","saveNewTodo","text","initialTodo","todo","todosSlice","todoAdded","entities","id","todoToggled","todoId","completed","todoColorSelected","todoDeleted","removeOne","allTodosCompleted","Object","values","forEach","completedTodosCleared","completedIds","map","removeMany","todosLoading","todosLoaded","newEntities","extraReducers","builder","addCase","pending","fulfilled","setAll","addOne","getSelectors","selectTodos","selectAll","selectTodoById","selectById","selectFilteredTodos","createSelector","filters","showAllCompletions","length","completedStatus","statusMatches","colorMatches","selectFilteredTodoIds","filteredTodos","Header","useState","setText","setStatus","dispatch","useDispatch","handleKeyDown","e","trimmedText","trim","which","isLoading","placeholder","loader","className","autoFocus","value","onChange","target","onKeyDown","disabled","_extends","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref","svgRef","title","props","createElement","focusable","role","viewBox","ref","fill","d","ForwardRef","forwardRef","availableColors","capitalize","s","toUpperCase","slice","TodoListItem","useSelector","colorOptions","c","type","checked","style","onClick","TodoList","todoIds","renderedListItems","RemainingTodos","count","suffix","StatusFilter","renderedFilters","ColorFilters","renderedColors","backgroundColor","Footer","todosRemaining","App","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomFromArray","array","min","max","Math","ceil","floor","todoTemplates","base","Server","routes","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","models","Model","list","hasMany","factories","Factory","Number","template","replace","generateTodoText","serializers","serialize","object","request","numerifyId","seeds","createList","store","configureStore","todosReducer","filtersReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b317929.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n"," import { createSlice } from '@reduxjs/toolkit'\n\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let { color, changeType } = action.payload\n        const { colors } = state\n        switch (changeType) {\n          case 'added': {\n            if (!colors.includes(color)) {\n              colors.push(color)\n            }\n            break;\n          }\n          case 'removed': {\n            state.colors = colors.filter(\n              (existingColor) => existingColor !== color\n            )\n            break;\n            \n          }\n          \n          default:\n            return\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: { color, changeType },\n        }\n      },\n    },\n  },\n})\n\nexport const { colorFilterChanged, statusFilterChanged } = filtersSlice.actions\n\nexport default filtersSlice.reducer\n","var _path;\n\nvar _excluded = [\"svgRef\", \"title\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar SvgTimesSolid = function SvgTimesSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"times\",\n    className: \"svg-inline--fa fa-times fa-w-11\",\n    role: \"img\",\n    viewBox: \"0 0 352 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\n  })));\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimesSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/times-solid.dddb6154.svg\";\nexport { ForwardRef as ReactComponent };","\nimport { createSlice, createSelector, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\nimport { StatusFilters } from '../filters/filtersSlice'\n\n// entity adapter\nconst todosAdapter = createEntityAdapter();\n\nconst initialState = todosAdapter.getInitialState({\n  status: 'idle'\n});\n\n\n// We pass 'todos/fetchTodos' as the string prefix, and a \"payload creator\" \n//function that calls our API and returns a promise containing the fetched data.\n// thunk function\nexport const fetchTodos = createAsyncThunk('todos/fetchTodos', async () => {\n  const response = await client.get('/fakeApi/todos');\n  return response.todos;\n});\n\n//You can only pass one argument to the thunk when you dispatch it. If you need to pass multiple values, pass them in a single object\n// The payload creator will receive an object as its second argument, which contains {getState, dispatch}, and some other useful values\n//The thunk dispatches the pending action before running your payload creator, then dispatches either fulfilled or rejected based on whether the Promise you return succeeds or fails\nexport const saveNewTodo = createAsyncThunk('todos/saveNewTodo', async text => {\n     const initialTodo = { text };\n     const response = await client.post('/fakeApi/todos', { todo: initialTodo });\n     return response.todo;\n\n})\n\n\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    todoAdded(state, action) {\n      const todo = action.payload\n      state.entities[todo.id] = todo\n    },\n    todoToggled(state, action) {\n      const todoId = action.payload\n      const todo = state.entities[todoId]\n      todo.completed = !todo.completed\n    },\n    todoColorSelected: {\n      reducer(state, action) {\n        const { color, todoId } = action.payload\n        state.entities[todoId].color = color\n      },\n      prepare(todoId, color) {\n        return {\n          payload: { todoId, color },\n        }\n      },\n    },\n    todoDeleted: todosAdapter.removeOne,\n    allTodosCompleted(state, action) {\n      Object.values(state.entities).forEach((todo) => {\n        todo.completed = true\n      })\n    },\n    completedTodosCleared(state, action) {\n    const completedIds = Object.values(state.entities)\n    .filter(todo => todo.completed)\n    .map(todo => todo.id)\n    // use adapter function as a mutating update helper\n    todosAdapter.removeMany(state, completedIds)\n    },\n    todosLoading(state, action) {\n      state.status = 'loading'\n    },\n    todosLoaded(state, action) {\n      const newEntities = {}\n      action.payload.forEach((todo) => {\n        newEntities[todo.id] = todo\n      })\n      state.entities = newEntities\n      state.status = 'idle'\n    },\n    \n  },\n  extraReducers: builder => {\n    builder\n    .addCase(fetchTodos.pending, (state,action) => {\n      state.status = 'loading'\n    })\n    .addCase(fetchTodos.fulfilled, (state, action) => {\n      todosAdapter.setAll(state, action.payload);\n      state.status = 'idle';\n    })\n    .addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n  }\n})\n\nexport const {\n  allTodosCompleted,\n  completedTodosCleared,\n  todoAdded,\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n  todosLoaded,\n  todosLoading,\n} = todosSlice.actions\n\nexport default todosSlice.reducer\n\n\n\n\n/*const selectTodoEntities = (state) => state.todos.entities\n\nexport const selectTodos = createSelector(selectTodoEntities, (entities) =>\n  Object.values(entities)\n)\n\nexport const selectTodoById = (state, todoId) => {\n  return selectTodoEntities(state)[todoId]\n}*/\n\n///////////////////////////////////////////////////////////////////////////////\n\n/*export const { selectAll: selectTodos, selectById: selectTodoById } = \ntodosAdapter.getSelectors(state => state.todos);*/\n\nexport const { selectAll: selectTodos, selectById: selectTodoById } =\n  todosAdapter.getSelectors(state => state.todos)\n\nexport const selectTodoIds = createSelector(\n  // First, pass one or more \"input selector\" functions:\n  selectTodos,\n  // Then, an \"output selector\" that receives all the input results as arguments\n  // and returns a final result value\n  (todos) => todos.map((todo) => todo.id)\n)\n\nexport const selectFilteredTodos = createSelector(\n  // First input selector: all todos\n  selectTodos,\n  // Second input selector: all filter values\n  (state) => state.filters,\n  // Output selector: receives both values\n  (todos, filters) => {\n    const { status, colors } = filters\n    const showAllCompletions = status === StatusFilters.All\n    if (showAllCompletions && colors.length === 0) {\n      return todos\n    }\n\n    const completedStatus = status === StatusFilters.Completed\n    // Return either active or completed todos based on filter\n    return todos.filter((todo) => {\n      const statusMatches =\n        showAllCompletions || todo.completed === completedStatus\n      const colorMatches = colors.length === 0 || colors.includes(todo.color)\n      return statusMatches && colorMatches\n    })\n  }\n)\n\nexport const selectFilteredTodoIds = createSelector(\n  // Pass our other memoized selector as an input\n  selectFilteredTodos,\n  // And derive data in the output selector\n  (filteredTodos) => filteredTodos.map((todo) => todo.id)\n)\n\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n// import saveNewTodo middleware function\nimport { saveNewTodo } from '../todos/todosSlice';\n\nconst Header = () => {\n  const [text, setText] = useState('');\n  // state to let us know if loading spinner should display\n  const [status, setStatus] = useState('idle');\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => setText(e.target.value);\n\n  // if a user presses enter dispatch with our text and 'ThunK function' as the payload and clear the text\n  const handleKeyDown = async e => {\n      const trimmedText = text.trim();\n      // if user pressed enter on keyboard\n      if(e.which === 13 && trimmedText) {\n         setStatus('loading');\n         \n         // Dispatch thunk function from todoslice.js with our text value\n         await dispatch(saveNewTodo(trimmedText));\n         // and clear text out of the input\n         setText('');\n         setStatus('idle');\n      }\n  };\n\n  let isLoading = status === 'loading';\n  let placeholder = isLoading ? '' : 'what needs to be done?';\n  let loader = isLoading ? <div className='loader' /> : null;\n  \n\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        autoFocus={true}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isLoading}\n      />\n      {loader}\n    </header>\n  )\n}\n\nexport default Header","export const availableColors = ['green', 'blue', 'orange', 'purple', 'red']\n\nexport const capitalize = (s) => s[0].toUpperCase() + s.slice(1)","\n\nimport React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { ReactComponent as TimesSolid } from './times-solid.svg'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport {\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n  selectTodoById,\n} from './todosSlice'\n\n// Destructure `props.id`, since we just need the ID value\nconst TodoListItem = ({ id }) => {\n  // Call our `selectTodoById` with the state _and_ the ID value\n  const todo = useSelector((state) => selectTodoById(state, id))\n  const { text, completed, color } = todo\n\n  const dispatch = useDispatch()\n\n  const handleCompletedChanged = () => {\n    dispatch(todoToggled(todo.id))\n  }\n\n  const handleColorChanged = (e) => {\n    const color = e.target.value\n    dispatch(todoColorSelected(todo.id, color))\n  }\n\n  const onDelete = () => {\n    dispatch(todoDeleted(todo.id))\n  }\n\n  const colorOptions = availableColors.map((c) => (\n    <option key={c} value={c}>\n      {capitalize(c)}\n    </option>\n  ))\n\n  return (\n    <li>\n      <div className=\"view\">\n        <div className=\"segment label\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={completed}\n            onChange={handleCompletedChanged}\n          />\n          <div className=\"todo-text\">{text}</div>\n        </div>\n        <div className=\"segment buttons\">\n          <select\n            className=\"colorPicker\"\n            value={color}\n            style={{ color }}\n            onChange={handleColorChanged}\n          >\n            <option value=\"\"></option>\n            {colorOptions}\n          </select>\n          <button className=\"destroy\" onClick={onDelete}>\n            <TimesSolid />\n          </button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default TodoListItem\n\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredTodoIds } from './todosSlice'; \nimport TodoListItem from './TodoListItem';\n\n\n\nconst TodoList = () => {\n    //  useSelector automatically subscribes to the Redux store for us! That way, any time an action is dispatched, it will call its selector function again right away.\n    // If the value returned by the selector changes from the last time it ran, useSelector will force our component to re-render with the new data. All we have to do is call useSelector()\n  const todoIds = useSelector(selectFilteredTodoIds);\n\n  const loadingStatus = useSelector(state => state.todos.status);\n//console.log(loadingStatus);\n//console.log(todoIds);\n  if (loadingStatus === 'loading') {\n    return (\n      <div className='todo-list'>\n        <div className='loader' />\n      </div>\n    )\n  }\n  \n\n  const renderedListItems = todoIds.map((todoId) => {\n    return <TodoListItem key={todoId} id={todoId} />\n  })\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n\nexport default TodoList;","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport {\n  StatusFilters,\n  colorFilterChanged,\n  statusFilterChanged,\n} from '../filters/filtersSlice'\nimport {\n  completedTodosCleared,\n  allTodosCompleted,\n  selectTodos,\n} from '../todos/todosSlice'\n\nconst RemainingTodos = ({ count }) => {\n  const suffix = count === 1 ? '' : 's'\n\n  return (\n    <div className=\"todo-count\">\n      <h5>Remaining Todos</h5>\n      <strong>{count}</strong> item{suffix} left\n    </div>\n  )\n}\n\nconst StatusFilter = ({ value: status, onChange }) => {\n  const renderedFilters = Object.keys(StatusFilters).map((key) => {\n    const value = StatusFilters[key]\n    const handleClick = () => onChange(value)\n    const className = value === status ? 'selected' : ''\n\n    return (\n      <li key={value}>\n        <button className={className} onClick={handleClick}>\n          {key}\n        </button>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"filters statusFilters\">\n      <h5>Filter by Status</h5>\n      <ul>{renderedFilters}</ul>\n    </div>\n  )\n}\n\nconst ColorFilters = ({ value: colors, onChange }) => {\n  const renderedColors = availableColors.map((color) => {\n    const checked = colors.includes(color)\n    const handleChange = () => {\n      const changeType = checked ? 'removed' : 'added'\n      onChange(color, changeType)\n    }\n\n    return (\n      <label key={color}>\n        <input\n          type=\"checkbox\"\n          name={color}\n          checked={checked}\n          onChange={handleChange}\n        />\n        <span\n          className=\"color-block\"\n          style={{\n            backgroundColor: color,\n          }}\n        ></span>\n        {capitalize(color)}\n      </label>\n    )\n  })\n\n  return (\n    <div className=\"filters colorFilters\">\n      <h5>Filter by Color</h5>\n      <form className=\"colorSelection\">{renderedColors}</form>\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const dispatch = useDispatch()\n\n  const todosRemaining = useSelector((state) => {\n    const uncompletedTodos = selectTodos(state).filter(\n      (todo) => !todo.completed\n    )\n    return uncompletedTodos.length\n  })\n\n  const { status, colors } = useSelector((state) => state.filters)\n\n  const onMarkCompletedClicked = () => dispatch(allTodosCompleted())\n  const onClearCompletedClicked = () => dispatch(completedTodosCleared())\n\n  const onColorChange = (color, changeType) =>\n    dispatch(colorFilterChanged(color, changeType))\n\n  const onStatusChange = (status) => dispatch(statusFilterChanged(status))\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"actions\">\n        <h5>Actions</h5>\n        <button className=\"button\" onClick={onMarkCompletedClicked}>\n          Mark All Completed\n        </button>\n        <button className=\"button\" onClick={onClearCompletedClicked}>\n          Clear Completed\n        </button>\n      </div>\n\n      <RemainingTodos count={todosRemaining} />\n      <StatusFilter value={status} onChange={onStatusChange} />\n      <ColorFilters value={colors} onChange={onColorChange} />\n    </footer>\n  )\n}\n\nexport default Footer\n\n","import React from 'react'\n\nimport Header from './features/header/Header'\nimport TodoList from './features/todos/TodoList'\nimport Footer from './features/footer/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <section>\n          <h1>Sebastian's Redux todo tracker</h1>\n        </section>\n      </nav>\n      <main>\n        <section className=\"medium-container\">\n          <h2>Stuff to do</h2>\n          <div className=\"todoapp\">\n            <Header />\n            <TodoList />\n            <Footer />\n          </div>\n        </section>\n      </main>\n    </div>\n  )\n}\n\n\nexport default App\n","/* eslint-disable no-unused-vars */\n\nimport { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 2000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})\n","import {configureStore } from \"@reduxjs/toolkit\";\nimport todosReducer from \"./features/todos/todosSlice\";\nimport filtersReducer from \"./features/filters/filtersSlice\";\n\n\n\n\n\nconst store = configureStore({\n    reducer: {\n        // Define a top-level state field named `todos`, handled by todosReducer\n        todos: todosReducer,\n        filters: filtersReducer\n    }\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\n\nimport './api/server';\n\nimport store from './store';\nimport { fetchTodos } from './features/todos/todosSlice';\n// this will fetch some fake todos from our fake db\nstore.dispatch(fetchTodos());\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider> \n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}